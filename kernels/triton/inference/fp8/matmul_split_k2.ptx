//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	gemm_split_k_kernel
.extern .shared .align 16 .b8 global_smem[];

.visible .entry gemm_split_k_kernel(
	.param .u64 gemm_split_k_kernel_param_0,
	.param .u64 gemm_split_k_kernel_param_1,
	.param .u64 gemm_split_k_kernel_param_2,
	.param .u32 gemm_split_k_kernel_param_3,
	.param .u32 gemm_split_k_kernel_param_4,
	.param .u32 gemm_split_k_kernel_param_5,
	.param .f32 gemm_split_k_kernel_param_6,
	.param .f32 gemm_split_k_kernel_param_7,
	.param .u32 gemm_split_k_kernel_param_8,
	.param .u32 gemm_split_k_kernel_param_9,
	.param .u32 gemm_split_k_kernel_param_10
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<64>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<439>;
	.reg .f32 	%f<602>;
	.reg .b64 	%rd<110>;
	.loc	1 39 0
$L__func_begin0:
	.loc	1 39 0

	ld.param.u32 	%r39, [gemm_split_k_kernel_param_10];
	ld.param.u32 	%r38, [gemm_split_k_kernel_param_9];
	ld.param.u32 	%r37, [gemm_split_k_kernel_param_8];
	ld.param.f32 	%f98, [gemm_split_k_kernel_param_7];
	ld.param.f32 	%f97, [gemm_split_k_kernel_param_6];
	ld.param.u32 	%r36, [gemm_split_k_kernel_param_5];
	ld.param.u32 	%r35, [gemm_split_k_kernel_param_4];
	ld.param.u32 	%r34, [gemm_split_k_kernel_param_3];
	ld.param.u64 	%rd13, [gemm_split_k_kernel_param_2];
	ld.param.u64 	%rd12, [gemm_split_k_kernel_param_1];
	ld.param.u64 	%rd11, [gemm_split_k_kernel_param_0];
$L__tmp0:
	.loc	1 60 24
	// begin inline asm
	mov.u32 %r40, %ctaid.x;
	// end inline asm
	.loc	1 61 26
	// begin inline asm
	mov.u32 %r41, %ctaid.y;
	// end inline asm
$L__tmp1:
	.loc	2 44 22
	add.s32 	%r202, %r39, 255;
$L__tmp2:
	.loc	2 44 22
	add.s32 	%r206, %r37, 63;
	.loc	2 44 28
	shr.s32 	%r207, %r206, 31;
	shr.u32 	%r208, %r207, 26;
	add.s32 	%r209, %r206, %r208;
	shr.s32 	%r210, %r209, 6;
	.loc	1 33 19
	div.s32 	%r212, %r40, %r210;
	mul.lo.s32 	%r3, %r212, %r210;
	sub.s32 	%r213, %r40, %r3;
$L__tmp3:
	.loc	1 67 21
	shl.b32 	%r214, %r213, 6;
	.loc	1 67 44
	mov.u32 	%r4, %tid.x;
	bfe.u32 	%r6, %r4, 5, 2;
	shr.u32 	%r7, %r4, 3;
	bfe.u32 	%r8, %r4, 3, 2;
	shl.b32 	%r9, %r6, 2;
	or.b32  	%r10, %r9, %r8;
	or.b32  	%r215, %r10, 16;
	or.b32  	%r216, %r10, 32;
	or.b32  	%r217, %r10, 48;
	and.b32  	%r11, %r4, 7;
	.loc	1 67 31
	or.b32  	%r12, %r214, %r10;
	or.b32  	%r13, %r214, %r215;
	or.b32  	%r14, %r214, %r216;
	or.b32  	%r15, %r214, %r217;
	.loc	1 68 21
	shl.b32 	%r16, %r212, 6;
	.loc	1 68 31
	or.b32  	%r218, %r16, %r10;
	or.b32  	%r219, %r16, %r215;
	or.b32  	%r220, %r16, %r216;
	or.b32  	%r221, %r16, %r217;
	.loc	1 69 21
	shl.b32 	%r17, %r41, 7;
	.loc	1 69 44
	shl.b32 	%r18, %r11, 4;
	.loc	1 69 31
	or.b32  	%r19, %r17, %r18;
	.loc	1 84 53
	mad.lo.s32 	%r222, %r12, %r34, %r19;
	mad.lo.s32 	%r223, %r13, %r34, %r19;
	mad.lo.s32 	%r224, %r14, %r34, %r19;
	mad.lo.s32 	%r225, %r15, %r34, %r19;
	.loc	1 84 22
	cvt.s64.s32 	%rd30, %r222;
	add.s64 	%rd14, %rd11, %rd30;
	cvt.s64.s32 	%rd31, %r223;
	add.s64 	%rd15, %rd11, %rd31;
	cvt.s64.s32 	%rd32, %r224;
	add.s64 	%rd16, %rd11, %rd32;
	cvt.s64.s32 	%rd33, %r225;
	add.s64 	%rd17, %rd11, %rd33;
	.loc	1 85 52
	mad.lo.s32 	%r226, %r218, %r35, %r19;
	mad.lo.s32 	%r227, %r219, %r35, %r19;
	mad.lo.s32 	%r228, %r220, %r35, %r19;
	mad.lo.s32 	%r229, %r221, %r35, %r19;
	.loc	1 85 22
	cvt.s64.s32 	%rd34, %r226;
	add.s64 	%rd18, %rd12, %rd34;
	cvt.s64.s32 	%rd35, %r227;
	add.s64 	%rd19, %rd12, %rd35;
	cvt.s64.s32 	%rd36, %r228;
	add.s64 	%rd20, %rd12, %rd36;
	cvt.s64.s32 	%rd37, %r229;
	add.s64 	%rd21, %rd12, %rd37;
	.loc	1 95 26
	sub.s32 	%r20, %r37, %r214;
	.loc	1 98 27
	setp.lt.s32 	%p17, %r12, %r20;
	setp.lt.s32 	%p18, %r13, %r20;
	setp.lt.s32 	%p19, %r14, %r20;
	setp.lt.s32 	%p20, %r15, %r20;
	.loc	1 93 23
	setp.lt.s32 	%p21, %r202, 256;
	setp.gt.s32 	%p22, %r202, 255;
	.loc	1 99 27
	setp.lt.s32 	%p23, %r19, %r39;
	.loc	1 101 20
	shl.b32 	%r230, %r10, 7;
	xor.b32  	%r231, %r10, %r4;
	shl.b32 	%r232, %r231, 4;
	and.b32  	%r233, %r232, 112;
	or.b32  	%r234, %r233, %r230;
	mov.u32 	%r235, global_smem;
	add.s32 	%r170, %r235, %r234;
	add.s32 	%r172, %r170, 2048;
	add.s32 	%r174, %r170, 4096;
	add.s32 	%r176, %r170, 6144;
	selp.b32 	%r236, 16, 0, %p17;
	selp.b32 	%r237, %r236, 0, %p23;
	selp.b32 	%r171, %r237, 0, %p22;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r170 + 0 ], [ %rd14 + 0 ], 0x10, %r171;
	// end inline asm
	selp.b32 	%r238, 16, 0, %p18;
	selp.b32 	%r239, %r238, 0, %p23;
	selp.b32 	%r173, %r239, 0, %p22;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r172 + 0 ], [ %rd15 + 0 ], 0x10, %r173;
	// end inline asm
	selp.b32 	%r240, 16, 0, %p19;
	selp.b32 	%r241, %r240, 0, %p23;
	selp.b32 	%r175, %r241, 0, %p22;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r174 + 0 ], [ %rd16 + 0 ], 0x10, %r175;
	// end inline asm
	selp.b32 	%r242, 16, 0, %p20;
	selp.b32 	%r243, %r242, 0, %p23;
	selp.b32 	%r177, %r243, 0, %p22;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r176 + 0 ], [ %rd17 + 0 ], 0x10, %r177;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 102 20
	add.s32 	%r178, %r170, 24576;
	add.s32 	%r180, %r170, 26624;
	add.s32 	%r182, %r170, 28672;
	add.s32 	%r184, %r170, 30720;
	selp.b32 	%r244, 16, 0, %p23;
	selp.b32 	%r181, %r244, 0, %p22;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r178 + 0 ], [ %rd18 + 0 ], 0x10, %r181;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r180 + 0 ], [ %rd19 + 0 ], 0x10, %r181;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r182 + 0 ], [ %rd20 + 0 ], 0x10, %r181;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r184 + 0 ], [ %rd21 + 0 ], 0x10, %r181;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 93 23
	setp.gt.s32 	%p24, %r202, 511;
	.loc	1 107 18
	add.s64 	%rd22, %rd14, 256;
	add.s64 	%rd23, %rd15, 256;
	add.s64 	%rd24, %rd16, 256;
	add.s64 	%rd25, %rd17, 256;
	.loc	1 108 18
	add.s64 	%rd26, %rd18, 256;
	add.s64 	%rd27, %rd19, 256;
	add.s64 	%rd28, %rd20, 256;
	add.s64 	%rd29, %rd21, 256;
	.loc	1 94 26
	add.s32 	%r245, %r39, -256;
	.loc	1 99 27
	setp.lt.s32 	%p25, %r19, %r245;
	.loc	1 101 20
	bar.sync 	0;
	add.s32 	%r186, %r170, 8192;
	add.s32 	%r188, %r170, 10240;
	add.s32 	%r190, %r170, 12288;
	add.s32 	%r192, %r170, 14336;
	selp.b32 	%r246, %r236, 0, %p25;
	selp.b32 	%r187, %r246, 0, %p24;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r186 + 0 ], [ %rd22 + 0 ], 0x10, %r187;
	// end inline asm
	selp.b32 	%r247, %r238, 0, %p25;
	selp.b32 	%r189, %r247, 0, %p24;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r188 + 0 ], [ %rd23 + 0 ], 0x10, %r189;
	// end inline asm
	selp.b32 	%r248, %r240, 0, %p25;
	selp.b32 	%r191, %r248, 0, %p24;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r190 + 0 ], [ %rd24 + 0 ], 0x10, %r191;
	// end inline asm
	selp.b32 	%r249, %r242, 0, %p25;
	selp.b32 	%r193, %r249, 0, %p24;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r192 + 0 ], [ %rd25 + 0 ], 0x10, %r193;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 102 20
	add.s32 	%r194, %r170, 32768;
	add.s32 	%r196, %r170, 34816;
	add.s32 	%r198, %r170, 36864;
	add.s32 	%r200, %r170, 38912;
	selp.b32 	%r250, 16, 0, %p25;
	selp.b32 	%r197, %r250, 0, %p24;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r194 + 0 ], [ %rd26 + 0 ], 0x10, %r197;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r196 + 0 ], [ %rd27 + 0 ], 0x10, %r197;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r198 + 0 ], [ %rd28 + 0 ], 0x10, %r197;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r200 + 0 ], [ %rd29 + 0 ], 0x10, %r197;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	mov.f32 	%f538, 0f00000000;
	mov.f32 	%f539, %f538;
	mov.f32 	%f540, %f538;
	mov.f32 	%f541, %f538;
	mov.f32 	%f542, %f538;
	mov.f32 	%f543, %f538;
	mov.f32 	%f544, %f538;
	mov.f32 	%f545, %f538;
	mov.f32 	%f546, %f538;
	mov.f32 	%f547, %f538;
	mov.f32 	%f548, %f538;
	mov.f32 	%f549, %f538;
	mov.f32 	%f550, %f538;
	mov.f32 	%f551, %f538;
	mov.f32 	%f552, %f538;
	mov.f32 	%f553, %f538;
	mov.f32 	%f554, %f538;
	mov.f32 	%f555, %f538;
	mov.f32 	%f556, %f538;
	mov.f32 	%f557, %f538;
	mov.f32 	%f558, %f538;
	mov.f32 	%f559, %f538;
	mov.f32 	%f560, %f538;
	mov.f32 	%f561, %f538;
	mov.f32 	%f562, %f538;
	mov.f32 	%f563, %f538;
	mov.f32 	%f564, %f538;
	mov.f32 	%f565, %f538;
	mov.f32 	%f566, %f538;
	mov.f32 	%f567, %f538;
	mov.f32 	%f568, %f538;
	mov.f32 	%f569, %f538;
	.loc	1 93 23
	@%p21 bra 	$L__BB0_3;
	.loc	1 0 23
	shr.s32 	%r203, %r202, 31;
	shr.u32 	%r204, %r203, 24;
	add.s32 	%r205, %r202, %r204;
	shr.s32 	%r1, %r205, 8;
	shr.u32 	%r5, %r4, 5;
	add.s32 	%r23, %r1, -2;
	and.b32  	%r24, %r5, 134217724;
	add.s32 	%r435, %r39, -512;
	.loc	1 93 23
	add.s32 	%r254, %r16, %r9;
	add.s32 	%r255, %r254, %r8;
	add.s32 	%r256, %r255, 48;
	mad.lo.s32 	%r257, %r35, %r256, %r17;
	add.s32 	%r258, %r257, %r18;
	cvt.s64.s32 	%rd39, %r258;
	add.s64 	%rd40, %rd39, %rd12;
	add.s64 	%rd1, %rd40, 512;
	add.s32 	%r259, %r255, 32;
	mad.lo.s32 	%r260, %r35, %r259, %r17;
	add.s32 	%r261, %r260, %r18;
	cvt.s64.s32 	%rd41, %r261;
	add.s64 	%rd42, %rd41, %rd12;
	add.s64 	%rd2, %rd42, 512;
	add.s32 	%r262, %r255, 16;
	mad.lo.s32 	%r263, %r35, %r262, %r17;
	add.s32 	%r264, %r263, %r18;
	cvt.s64.s32 	%rd43, %r264;
	add.s64 	%rd44, %rd43, %rd12;
	add.s64 	%rd3, %rd44, 512;
	mad.lo.s32 	%r265, %r35, %r255, %r17;
	add.s32 	%r266, %r265, %r18;
	cvt.s64.s32 	%rd45, %r266;
	add.s64 	%rd46, %rd45, %rd12;
	add.s64 	%rd4, %rd46, 512;
	shl.b32 	%r267, %r40, 6;
	or.b32  	%r268, %r267, %r9;
	add.s32 	%r269, %r268, %r8;
	shl.b32 	%r270, %r3, 6;
	sub.s32 	%r271, %r269, %r270;
	add.s32 	%r272, %r271, 48;
	mad.lo.s32 	%r273, %r34, %r272, %r17;
	add.s32 	%r274, %r273, %r18;
	cvt.s64.s32 	%rd47, %r274;
	add.s64 	%rd48, %rd47, %rd11;
	add.s64 	%rd5, %rd48, 512;
	or.b32  	%r275, %r271, 32;
	mad.lo.s32 	%r276, %r34, %r275, %r17;
	add.s32 	%r277, %r276, %r18;
	cvt.s64.s32 	%rd49, %r277;
	add.s64 	%rd50, %rd49, %rd11;
	add.s64 	%rd6, %rd50, 512;
	add.s32 	%r278, %r271, 16;
	mad.lo.s32 	%r279, %r34, %r278, %r17;
	add.s32 	%r280, %r279, %r18;
	cvt.s64.s32 	%rd51, %r280;
	add.s64 	%rd52, %rd51, %rd11;
	add.s64 	%rd7, %rd52, 512;
	mad.lo.s32 	%r281, %r34, %r271, %r17;
	add.s32 	%r282, %r281, %r18;
	cvt.s64.s32 	%rd53, %r282;
	add.s64 	%rd54, %rd53, %rd11;
	add.s64 	%rd8, %rd54, 512;
	mov.b32 	%r438, 0;
	mov.f32 	%f434, 0f00000000;
	mov.b32 	%r437, 1;
	mov.b32 	%r436, -1;
	mov.u64 	%rd109, 0;
	mov.f32 	%f538, %f434;
	mov.f32 	%f539, %f434;
	mov.f32 	%f540, %f434;
	mov.f32 	%f541, %f434;
	mov.f32 	%f542, %f434;
	mov.f32 	%f543, %f434;
	mov.f32 	%f544, %f434;
	mov.f32 	%f545, %f434;
	mov.f32 	%f546, %f434;
	mov.f32 	%f547, %f434;
	mov.f32 	%f548, %f434;
	mov.f32 	%f549, %f434;
	mov.f32 	%f550, %f434;
	mov.f32 	%f551, %f434;
	mov.f32 	%f552, %f434;
	mov.f32 	%f553, %f434;
	mov.f32 	%f554, %f434;
	mov.f32 	%f555, %f434;
	mov.f32 	%f556, %f434;
	mov.f32 	%f557, %f434;
	mov.f32 	%f558, %f434;
	mov.f32 	%f559, %f434;
	mov.f32 	%f560, %f434;
	mov.f32 	%f561, %f434;
	mov.f32 	%f562, %f434;
	mov.f32 	%f563, %f434;
	mov.f32 	%f564, %f434;
	mov.f32 	%f565, %f434;
	mov.f32 	%f566, %f434;
	mov.f32 	%f567, %f434;
	mov.f32 	%f568, %f434;
	mov.f32 	%f569, %f434;
$L__BB0_2:
	setp.lt.s32 	%p38, %r438, %r23;
	add.s32 	%r299, %r436, 1;
	setp.lt.s32 	%p39, %r299, 3;
	selp.b32 	%r436, %r299, 0, %p39;
	.loc	1 101 20
	shl.b32 	%r300, %r436, 13;
	add.s32 	%r302, %r235, %r300;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 102 20
	add.s32 	%r303, %r302, 24576;
	.loc	1 104 27
	shfl.sync.idx.b32	%r304, %r24, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r305, %r304, 7;
	and.b32  	%r306, %r305, 384;
	cvt.u64.u32 	%rd71, %r306;
	shr.u32 	%r307, %r302, 4;
	cvt.u64.u32 	%rd72, %r307;
	and.b64  	%rd73, %rd72, 16383;
	add.s64 	%rd74, %rd73, %rd71;
	or.b64  	%rd55, %rd74, 4611686293338849280;
	shr.u32 	%r308, %r303, 4;
	cvt.u64.u32 	%rd75, %r308;
	and.b64  	%rd76, %rd75, 16383;
	or.b64  	%rd56, %rd76, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569}, %rd55, %rd56, 1, 1, 1;
	// end inline asm
	add.s64 	%rd57, %rd74, 4611686293338849282;
	add.s64 	%rd58, %rd76, 4611686293338849282;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569}, %rd57, %rd58, 1, 1, 1;
	// end inline asm
	add.s64 	%rd59, %rd74, 4611686293338849284;
	add.s64 	%rd60, %rd76, 4611686293338849284;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569}, %rd59, %rd60, 1, 1, 1;
	// end inline asm
	add.s64 	%rd61, %rd74, 4611686293338849286;
	add.s64 	%rd62, %rd76, 4611686293338849286;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569}, %rd61, %rd62, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f389, %r302;
	mov.b32 	%f394, %r303;
	mov.f32 	%f391, 0f00000001;
	mov.f32 	%f396, 0f00000080;
	mov.f32 	%f398, %f434;
	mov.f32 	%f395, %f391;
	mov.f32 	%f390, %f396;
	mov.f32 	%f392, %f434;
	mov.f32 	%f393, %f434;
	mov.f32 	%f397, %f434;
	// begin inline asm
	// wait for regs: %f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569,%f389,%f390,%f391,%f392,%f393,%f394,%f395,%f396,%f397,%f398
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 107 18
	add.s64 	%rd63, %rd8, %rd109;
	add.s64 	%rd64, %rd7, %rd109;
	add.s64 	%rd65, %rd6, %rd109;
	.loc	1 108 18
	add.s64 	%rd66, %rd5, %rd109;
	add.s64 	%rd67, %rd4, %rd109;
	add.s64 	%rd68, %rd3, %rd109;
	add.s64 	%rd69, %rd2, %rd109;
	.loc	1 93 23
	add.s64 	%rd70, %rd1, %rd109;
	add.s32 	%r309, %r437, 1;
	setp.lt.s32 	%p40, %r309, 3;
	selp.b32 	%r437, %r309, 0, %p40;
	.loc	1 99 27
	setp.lt.s32 	%p41, %r19, %r435;
	.loc	1 101 20
	shl.b32 	%r310, %r437, 13;
	bar.sync 	0;
	add.s32 	%r283, %r170, %r310;
	add.s32 	%r285, %r283, 2048;
	add.s32 	%r287, %r283, 4096;
	add.s32 	%r289, %r283, 6144;
	selp.b32 	%r311, 16, 0, %p41;
	selp.b32 	%r312, %r311, 0, %p17;
	selp.b32 	%r284, %r312, 0, %p38;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r283 + 0 ], [ %rd63 + 0 ], 0x10, %r284;
	// end inline asm
	selp.b32 	%r313, %r311, 0, %p18;
	selp.b32 	%r286, %r313, 0, %p38;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r285 + 0 ], [ %rd64 + 0 ], 0x10, %r286;
	// end inline asm
	selp.b32 	%r314, %r311, 0, %p19;
	selp.b32 	%r288, %r314, 0, %p38;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r287 + 0 ], [ %rd65 + 0 ], 0x10, %r288;
	// end inline asm
	selp.b32 	%r315, %r311, 0, %p20;
	selp.b32 	%r290, %r315, 0, %p38;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r289 + 0 ], [ %rd66 + 0 ], 0x10, %r290;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 102 20
	add.s32 	%r291, %r178, %r310;
	add.s32 	%r293, %r291, 2048;
	add.s32 	%r295, %r291, 4096;
	add.s32 	%r297, %r291, 6144;
	selp.b32 	%r294, %r311, 0, %p38;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r291 + 0 ], [ %rd67 + 0 ], 0x10, %r294;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r293 + 0 ], [ %rd68 + 0 ], 0x10, %r294;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r295 + 0 ], [ %rd69 + 0 ], 0x10, %r294;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r297 + 0 ], [ %rd70 + 0 ], 0x10, %r294;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 93 23
	add.s32 	%r438, %r438, 1;
	add.s64 	%rd109, %rd109, 256;
	add.s32 	%r435, %r435, -256;
	setp.lt.s32 	%p42, %r438, %r1;
	@%p42 bra 	$L__BB0_2;
$L__BB0_3:
	.loc	1 67 44
	shl.b32 	%r368, %r11, 3;
	.loc	1 93 23
	// begin inline asm
	// wait for regs: %f538,%f539,%f540,%f541,%f542,%f543,%f544,%f545,%f546,%f547,%f548,%f549,%f550,%f551,%f552,%f553,%f554,%f555,%f556,%f557,%f558,%f559,%f560,%f561,%f562,%f563,%f564,%f565,%f566,%f567,%f568,%f569
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 109 20
	mul.f32 	%f505, %f97, %f98;
	.loc	1 109 30
	mul.f32 	%f506, %f505, %f538;
	mul.f32 	%f507, %f505, %f539;
	mul.f32 	%f508, %f505, %f540;
	mul.f32 	%f509, %f505, %f541;
	mul.f32 	%f510, %f505, %f542;
	mul.f32 	%f511, %f505, %f543;
	mul.f32 	%f512, %f505, %f544;
	mul.f32 	%f513, %f505, %f545;
	mul.f32 	%f514, %f505, %f546;
	mul.f32 	%f515, %f505, %f547;
	mul.f32 	%f516, %f505, %f548;
	mul.f32 	%f517, %f505, %f549;
	mul.f32 	%f518, %f505, %f550;
	mul.f32 	%f519, %f505, %f551;
	mul.f32 	%f520, %f505, %f552;
	mul.f32 	%f521, %f505, %f553;
	mul.f32 	%f522, %f505, %f554;
	mul.f32 	%f523, %f505, %f555;
	mul.f32 	%f524, %f505, %f556;
	mul.f32 	%f525, %f505, %f557;
	mul.f32 	%f526, %f505, %f558;
	mul.f32 	%f527, %f505, %f559;
	mul.f32 	%f528, %f505, %f560;
	mul.f32 	%f529, %f505, %f561;
	mul.f32 	%f530, %f505, %f562;
	mul.f32 	%f531, %f505, %f563;
	mul.f32 	%f532, %f505, %f564;
	mul.f32 	%f533, %f505, %f565;
	mul.f32 	%f534, %f505, %f566;
	mul.f32 	%f535, %f505, %f567;
	mul.f32 	%f536, %f505, %f568;
	mul.f32 	%f537, %f505, %f569;
	.loc	1 113 31
	or.b32  	%r369, %r16, %r368;
	or.b32  	%r370, %r369, 2;
	or.b32  	%r371, %r369, 4;
	or.b32  	%r372, %r369, 6;
	.loc	1 115 40
	mul.lo.s32 	%r373, %r12, %r36;
	mul.lo.s32 	%r374, %r13, %r36;
	mul.lo.s32 	%r375, %r14, %r36;
	mul.lo.s32 	%r376, %r15, %r36;
	.loc	1 115 52
	add.s32 	%r377, %r373, %r369;
	add.s32 	%r378, %r373, %r370;
	add.s32 	%r379, %r373, %r371;
	add.s32 	%r380, %r373, %r372;
	add.s32 	%r381, %r374, %r369;
	add.s32 	%r382, %r374, %r370;
	add.s32 	%r383, %r374, %r371;
	add.s32 	%r384, %r374, %r372;
	add.s32 	%r385, %r375, %r369;
	add.s32 	%r386, %r375, %r370;
	add.s32 	%r387, %r375, %r371;
	add.s32 	%r388, %r375, %r372;
	add.s32 	%r389, %r376, %r369;
	add.s32 	%r390, %r376, %r370;
	add.s32 	%r391, %r376, %r371;
	add.s32 	%r392, %r376, %r372;
	.loc	1 115 22
	mul.wide.s32 	%rd93, %r377, 2;
	add.s64 	%rd77, %rd13, %rd93;
	mul.wide.s32 	%rd94, %r378, 2;
	add.s64 	%rd78, %rd13, %rd94;
	mul.wide.s32 	%rd95, %r379, 2;
	add.s64 	%rd79, %rd13, %rd95;
	mul.wide.s32 	%rd96, %r380, 2;
	add.s64 	%rd80, %rd13, %rd96;
	mul.wide.s32 	%rd97, %r381, 2;
	add.s64 	%rd81, %rd13, %rd97;
	mul.wide.s32 	%rd98, %r382, 2;
	add.s64 	%rd82, %rd13, %rd98;
	mul.wide.s32 	%rd99, %r383, 2;
	add.s64 	%rd83, %rd13, %rd99;
	mul.wide.s32 	%rd100, %r384, 2;
	add.s64 	%rd84, %rd13, %rd100;
	mul.wide.s32 	%rd101, %r385, 2;
	add.s64 	%rd85, %rd13, %rd101;
	mul.wide.s32 	%rd102, %r386, 2;
	add.s64 	%rd86, %rd13, %rd102;
	mul.wide.s32 	%rd103, %r387, 2;
	add.s64 	%rd87, %rd13, %rd103;
	mul.wide.s32 	%rd104, %r388, 2;
	add.s64 	%rd88, %rd13, %rd104;
	mul.wide.s32 	%rd105, %r389, 2;
	add.s64 	%rd89, %rd13, %rd105;
	mul.wide.s32 	%rd106, %r390, 2;
	add.s64 	%rd90, %rd13, %rd106;
	mul.wide.s32 	%rd107, %r391, 2;
	add.s64 	%rd91, %rd13, %rd107;
	mul.wide.s32 	%rd108, %r392, 2;
	add.s64 	%rd92, %rd13, %rd108;
	.loc	1 116 21
	setp.lt.s32 	%p59, %r12, %r37;
	setp.lt.s32 	%p60, %r13, %r37;
	setp.lt.s32 	%p61, %r14, %r37;
	setp.lt.s32 	%p62, %r15, %r37;
	.loc	1 116 45
	setp.lt.s32 	%p63, %r369, %r38;
	.loc	1 116 35
	and.pred  	%p43, %p59, %p63;
	and.pred  	%p47, %p60, %p63;
	and.pred  	%p51, %p61, %p63;
	and.pred  	%p55, %p62, %p63;
	.loc	1 118 26
	cvt.rn.f16.f32 	%rs65, %f506;
	cvt.rn.f16.f32 	%rs66, %f507;
	cvt.rn.f16.f32 	%rs67, %f508;
	cvt.rn.f16.f32 	%rs68, %f509;
	cvt.rn.f16.f32 	%rs69, %f510;
	cvt.rn.f16.f32 	%rs70, %f511;
	cvt.rn.f16.f32 	%rs71, %f512;
	cvt.rn.f16.f32 	%rs72, %f513;
	cvt.rn.f16.f32 	%rs73, %f514;
	cvt.rn.f16.f32 	%rs74, %f515;
	cvt.rn.f16.f32 	%rs75, %f516;
	cvt.rn.f16.f32 	%rs76, %f517;
	cvt.rn.f16.f32 	%rs77, %f518;
	cvt.rn.f16.f32 	%rs78, %f519;
	cvt.rn.f16.f32 	%rs79, %f520;
	cvt.rn.f16.f32 	%rs80, %f521;
	cvt.rn.f16.f32 	%rs81, %f522;
	cvt.rn.f16.f32 	%rs82, %f523;
	cvt.rn.f16.f32 	%rs83, %f524;
	cvt.rn.f16.f32 	%rs84, %f525;
	cvt.rn.f16.f32 	%rs85, %f526;
	cvt.rn.f16.f32 	%rs86, %f527;
	cvt.rn.f16.f32 	%rs87, %f528;
	cvt.rn.f16.f32 	%rs88, %f529;
	cvt.rn.f16.f32 	%rs89, %f530;
	cvt.rn.f16.f32 	%rs90, %f531;
	cvt.rn.f16.f32 	%rs91, %f532;
	cvt.rn.f16.f32 	%rs92, %f533;
	cvt.rn.f16.f32 	%rs93, %f534;
	cvt.rn.f16.f32 	%rs94, %f535;
	cvt.rn.f16.f32 	%rs95, %f536;
	cvt.rn.f16.f32 	%rs96, %f537;
	and.b32  	%r393, %r4, 15;
	shl.b32 	%r394, %r7, 2;
	and.b32  	%r395, %r394, 8;
	mad.lo.s32 	%r396, %r393, 72, %r395;
	mad.lo.s32 	%r397, %r6, 1152, %r396;
	mov.b32 	%r398, {%rs65, %rs66};
	mov.b32 	%r399, {%rs67, %rs68};
	mov.b32 	%r400, {%rs69, %rs70};
	mov.b32 	%r401, {%rs71, %rs72};
	shl.b32 	%r402, %r397, 1;
	add.s32 	%r316, %r235, %r402;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r316], {%r398, %r399, %r400, %r401};
	// end inline asm
	mov.b32 	%r404, {%rs73, %rs74};
	mov.b32 	%r405, {%rs75, %rs76};
	mov.b32 	%r406, {%rs77, %rs78};
	mov.b32 	%r407, {%rs79, %rs80};
	add.s32 	%r321, %r316, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r321], {%r404, %r405, %r406, %r407};
	// end inline asm
	mov.b32 	%r408, {%rs81, %rs82};
	mov.b32 	%r409, {%rs83, %rs84};
	mov.b32 	%r410, {%rs85, %rs86};
	mov.b32 	%r411, {%rs87, %rs88};
	add.s32 	%r326, %r316, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r326], {%r408, %r409, %r410, %r411};
	// end inline asm
	mov.b32 	%r412, {%rs89, %rs90};
	mov.b32 	%r413, {%rs91, %rs92};
	mov.b32 	%r414, {%rs93, %rs94};
	mov.b32 	%r415, {%rs95, %rs96};
	add.s32 	%r331, %r316, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r331], {%r412, %r413, %r414, %r415};
	// end inline asm
	bar.sync 	0;
	mad.lo.s32 	%r416, %r10, 72, %r368;
	shl.b32 	%r417, %r416, 1;
	add.s32 	%r418, %r235, %r417;
	ld.shared.v4.b32 	{%r419, %r420, %r421, %r422}, [%r418];
	ld.shared.v4.b32 	{%r423, %r424, %r425, %r426}, [%r418+2304];
	ld.shared.v4.b32 	{%r427, %r428, %r429, %r430}, [%r418+4608];
	ld.shared.v4.b32 	{%r431, %r432, %r433, %r434}, [%r418+6912];
	// begin inline asm
	mov.u32 %r336, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r336, [ %rd77 + 0 ], %r419;
	// end inline asm
	// begin inline asm
	mov.u32 %r338, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r338, [ %rd78 + 0 ], %r420;
	// end inline asm
	// begin inline asm
	mov.u32 %r340, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r340, [ %rd79 + 0 ], %r421;
	// end inline asm
	// begin inline asm
	mov.u32 %r342, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r342, [ %rd80 + 0 ], %r422;
	// end inline asm
	// begin inline asm
	mov.u32 %r344, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r344, [ %rd81 + 0 ], %r423;
	// end inline asm
	// begin inline asm
	mov.u32 %r346, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r346, [ %rd82 + 0 ], %r424;
	// end inline asm
	// begin inline asm
	mov.u32 %r348, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r348, [ %rd83 + 0 ], %r425;
	// end inline asm
	// begin inline asm
	mov.u32 %r350, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r350, [ %rd84 + 0 ], %r426;
	// end inline asm
	// begin inline asm
	mov.u32 %r352, 0x0;
	@%p51 atom.global.gpu.acq_rel.add.noftz.f16x2 %r352, [ %rd85 + 0 ], %r427;
	// end inline asm
	// begin inline asm
	mov.u32 %r354, 0x0;
	@%p51 atom.global.gpu.acq_rel.add.noftz.f16x2 %r354, [ %rd86 + 0 ], %r428;
	// end inline asm
	// begin inline asm
	mov.u32 %r356, 0x0;
	@%p51 atom.global.gpu.acq_rel.add.noftz.f16x2 %r356, [ %rd87 + 0 ], %r429;
	// end inline asm
	// begin inline asm
	mov.u32 %r358, 0x0;
	@%p51 atom.global.gpu.acq_rel.add.noftz.f16x2 %r358, [ %rd88 + 0 ], %r430;
	// end inline asm
	// begin inline asm
	mov.u32 %r360, 0x0;
	@%p55 atom.global.gpu.acq_rel.add.noftz.f16x2 %r360, [ %rd89 + 0 ], %r431;
	// end inline asm
	// begin inline asm
	mov.u32 %r362, 0x0;
	@%p55 atom.global.gpu.acq_rel.add.noftz.f16x2 %r362, [ %rd90 + 0 ], %r432;
	// end inline asm
	// begin inline asm
	mov.u32 %r364, 0x0;
	@%p55 atom.global.gpu.acq_rel.add.noftz.f16x2 %r364, [ %rd91 + 0 ], %r433;
	// end inline asm
	// begin inline asm
	mov.u32 %r366, 0x0;
	@%p55 atom.global.gpu.acq_rel.add.noftz.f16x2 %r366, [ %rd92 + 0 ], %r434;
	// end inline asm
	.loc	1 118 4
	ret;
$L__tmp4:
$L__func_end0:

}
	.file	1 "/opt/dlami/nvme/csullivan/applied-ai/kernels/triton/inference/fp8/splitk_gemm_fp8.py"
	.file	2 "/opt/dlami/nvme/csullivan/triton/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 215
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 115
.b8 112
.b8 108
.b8 105
.b8 116
.b8 107
.b8 95
.b8 103
.b8 101
.b8 109
.b8 109
.b8 95
.b8 102
.b8 112
.b8 56
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 100
.b8 108
.b8 97
.b8 109
.b8 105
.b8 47
.b8 110
.b8 118
.b8 109
.b8 101
.b8 47
.b8 99
.b8 115
.b8 117
.b8 108
.b8 108
.b8 105
.b8 118
.b8 97
.b8 110
.b8 47
.b8 97
.b8 112
.b8 112
.b8 108
.b8 105
.b8 101
.b8 100
.b8 45
.b8 97
.b8 105
.b8 47
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 115
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 47
.b8 105
.b8 110
.b8 102
.b8 101
.b8 114
.b8 101
.b8 110
.b8 99
.b8 101
.b8 47
.b8 102
.b8 112
.b8 56
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 103
.b8 101
.b8 109
.b8 109
.b8 95
.b8 115
.b8 112
.b8 108
.b8 105
.b8 116
.b8 95
.b8 107
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 126
.b8 4
.b32 126
.b64 $L__tmp1
.b64 $L__tmp2
.b8 1
.b8 62
.b8 24
.b8 4
.b32 126
.b64 $L__tmp2
.b64 $L__tmp3
.b8 1
.b8 64
.b8 40
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}

