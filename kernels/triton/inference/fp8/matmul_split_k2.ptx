//
// Generated by LLVM NVPTX Back-End
//

.version 8.3
.target sm_90a
.address_size 64

	// .globl	gemm_split_k_kernel
.extern .shared .align 16 .b8 global_smem[];

.visible .entry gemm_split_k_kernel(
	.param .u64 gemm_split_k_kernel_param_0,
	.param .u64 gemm_split_k_kernel_param_1,
	.param .u64 gemm_split_k_kernel_param_2,
	.param .u32 gemm_split_k_kernel_param_3,
	.param .u32 gemm_split_k_kernel_param_4,
	.param .u32 gemm_split_k_kernel_param_5,
	.param .u32 gemm_split_k_kernel_param_6,
	.param .u32 gemm_split_k_kernel_param_7,
	.param .u32 gemm_split_k_kernel_param_8
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<422>;
	.reg .f32 	%f<567>;
	.reg .b64 	%rd<110>;
	.loc	1 39 0
$L__func_begin0:
	.loc	1 39 0

	ld.param.u32 	%r38, [gemm_split_k_kernel_param_8];
	ld.param.u32 	%r37, [gemm_split_k_kernel_param_7];
	ld.param.u32 	%r36, [gemm_split_k_kernel_param_6];
	ld.param.u32 	%r35, [gemm_split_k_kernel_param_5];
	ld.param.u32 	%r34, [gemm_split_k_kernel_param_4];
	ld.param.u32 	%r33, [gemm_split_k_kernel_param_3];
	ld.param.u64 	%rd13, [gemm_split_k_kernel_param_2];
	ld.param.u64 	%rd12, [gemm_split_k_kernel_param_1];
	ld.param.u64 	%rd11, [gemm_split_k_kernel_param_0];
$L__tmp0:
	.loc	1 58 24
	// begin inline asm
	mov.u32 %r39, %ctaid.x;
	// end inline asm
	.loc	1 59 26
	// begin inline asm
	mov.u32 %r40, %ctaid.y;
	// end inline asm
$L__tmp1:
	.loc	2 44 22
	add.s32 	%r201, %r38, 255;
$L__tmp2:
	.loc	2 44 22
	add.s32 	%r205, %r36, 63;
	.loc	2 44 28
	shr.s32 	%r206, %r205, 31;
	shr.u32 	%r207, %r206, 26;
	add.s32 	%r208, %r205, %r207;
	shr.s32 	%r209, %r208, 6;
	.loc	1 33 19
	div.s32 	%r211, %r39, %r209;
	mul.lo.s32 	%r3, %r211, %r209;
	sub.s32 	%r212, %r39, %r3;
$L__tmp3:
	.loc	1 65 21
	shl.b32 	%r213, %r212, 6;
	.loc	1 65 44
	mov.u32 	%r4, %tid.x;
	bfe.u32 	%r6, %r4, 5, 2;
	shr.u32 	%r7, %r4, 3;
	bfe.u32 	%r8, %r4, 3, 2;
	shl.b32 	%r9, %r6, 2;
	or.b32  	%r10, %r9, %r8;
	or.b32  	%r214, %r10, 16;
	or.b32  	%r215, %r10, 32;
	or.b32  	%r216, %r10, 48;
	and.b32  	%r11, %r4, 7;
	.loc	1 65 31
	or.b32  	%r12, %r213, %r10;
	or.b32  	%r13, %r213, %r214;
	or.b32  	%r14, %r213, %r215;
	or.b32  	%r15, %r213, %r216;
	.loc	1 66 21
	shl.b32 	%r16, %r211, 6;
	.loc	1 66 31
	or.b32  	%r217, %r16, %r10;
	or.b32  	%r218, %r16, %r214;
	or.b32  	%r219, %r16, %r215;
	or.b32  	%r220, %r16, %r216;
	.loc	1 67 21
	shl.b32 	%r17, %r40, 7;
	.loc	1 67 44
	shl.b32 	%r18, %r11, 4;
	.loc	1 67 31
	or.b32  	%r19, %r17, %r18;
	.loc	1 82 53
	mad.lo.s32 	%r221, %r12, %r33, %r19;
	mad.lo.s32 	%r222, %r13, %r33, %r19;
	mad.lo.s32 	%r223, %r14, %r33, %r19;
	mad.lo.s32 	%r224, %r15, %r33, %r19;
	.loc	1 82 22
	cvt.s64.s32 	%rd30, %r221;
	add.s64 	%rd14, %rd11, %rd30;
	cvt.s64.s32 	%rd31, %r222;
	add.s64 	%rd15, %rd11, %rd31;
	cvt.s64.s32 	%rd32, %r223;
	add.s64 	%rd16, %rd11, %rd32;
	cvt.s64.s32 	%rd33, %r224;
	add.s64 	%rd17, %rd11, %rd33;
	.loc	1 83 52
	mad.lo.s32 	%r225, %r217, %r34, %r19;
	mad.lo.s32 	%r226, %r218, %r34, %r19;
	mad.lo.s32 	%r227, %r219, %r34, %r19;
	mad.lo.s32 	%r228, %r220, %r34, %r19;
	.loc	1 83 22
	cvt.s64.s32 	%rd34, %r225;
	add.s64 	%rd18, %rd12, %rd34;
	cvt.s64.s32 	%rd35, %r226;
	add.s64 	%rd19, %rd12, %rd35;
	cvt.s64.s32 	%rd36, %r227;
	add.s64 	%rd20, %rd12, %rd36;
	cvt.s64.s32 	%rd37, %r228;
	add.s64 	%rd21, %rd12, %rd37;
	.loc	1 91 23
	setp.lt.s32 	%p17, %r201, 256;
	setp.gt.s32 	%p18, %r201, 255;
	.loc	1 94 51
	setp.lt.s32 	%p19, %r19, %r38;
	.loc	1 94 20
	shl.b32 	%r229, %r10, 7;
	xor.b32  	%r230, %r10, %r4;
	shl.b32 	%r231, %r230, 4;
	and.b32  	%r232, %r231, 112;
	or.b32  	%r233, %r232, %r229;
	mov.u32 	%r234, global_smem;
	add.s32 	%r169, %r234, %r233;
	add.s32 	%r171, %r169, 2048;
	add.s32 	%r173, %r169, 4096;
	add.s32 	%r175, %r169, 6144;
	selp.b32 	%r235, 16, 0, %p19;
	selp.b32 	%r172, %r235, 0, %p18;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r169 + 0 ], [ %rd14 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r171 + 0 ], [ %rd15 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r173 + 0 ], [ %rd16 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r175 + 0 ], [ %rd17 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 95 20
	add.s32 	%r177, %r169, 24576;
	add.s32 	%r179, %r169, 26624;
	add.s32 	%r181, %r169, 28672;
	add.s32 	%r183, %r169, 30720;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r177 + 0 ], [ %rd18 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r179 + 0 ], [ %rd19 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r181 + 0 ], [ %rd20 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r183 + 0 ], [ %rd21 + 0 ], 0x10, %r172;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 91 23
	setp.gt.s32 	%p20, %r201, 511;
	.loc	1 100 18
	add.s64 	%rd22, %rd14, 256;
	add.s64 	%rd23, %rd15, 256;
	add.s64 	%rd24, %rd16, 256;
	add.s64 	%rd25, %rd17, 256;
	.loc	1 101 18
	add.s64 	%rd26, %rd18, 256;
	add.s64 	%rd27, %rd19, 256;
	add.s64 	%rd28, %rd20, 256;
	add.s64 	%rd29, %rd21, 256;
	.loc	1 92 26
	add.s32 	%r236, %r38, -256;
	.loc	1 94 51
	setp.lt.s32 	%p21, %r19, %r236;
	.loc	1 94 20
	bar.sync 	0;
	add.s32 	%r185, %r169, 8192;
	add.s32 	%r187, %r169, 10240;
	add.s32 	%r189, %r169, 12288;
	add.s32 	%r191, %r169, 14336;
	selp.b32 	%r237, 16, 0, %p21;
	selp.b32 	%r188, %r237, 0, %p20;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r185 + 0 ], [ %rd22 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r187 + 0 ], [ %rd23 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r189 + 0 ], [ %rd24 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r191 + 0 ], [ %rd25 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 95 20
	add.s32 	%r193, %r169, 32768;
	add.s32 	%r195, %r169, 34816;
	add.s32 	%r197, %r169, 36864;
	add.s32 	%r199, %r169, 38912;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r193 + 0 ], [ %rd26 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r195 + 0 ], [ %rd27 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r197 + 0 ], [ %rd28 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r199 + 0 ], [ %rd29 + 0 ], 0x10, %r188;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	mov.f32 	%f503, 0f00000000;
	mov.f32 	%f504, %f503;
	mov.f32 	%f505, %f503;
	mov.f32 	%f506, %f503;
	mov.f32 	%f507, %f503;
	mov.f32 	%f508, %f503;
	mov.f32 	%f509, %f503;
	mov.f32 	%f510, %f503;
	mov.f32 	%f511, %f503;
	mov.f32 	%f512, %f503;
	mov.f32 	%f513, %f503;
	mov.f32 	%f514, %f503;
	mov.f32 	%f515, %f503;
	mov.f32 	%f516, %f503;
	mov.f32 	%f517, %f503;
	mov.f32 	%f518, %f503;
	mov.f32 	%f519, %f503;
	mov.f32 	%f520, %f503;
	mov.f32 	%f521, %f503;
	mov.f32 	%f522, %f503;
	mov.f32 	%f523, %f503;
	mov.f32 	%f524, %f503;
	mov.f32 	%f525, %f503;
	mov.f32 	%f526, %f503;
	mov.f32 	%f527, %f503;
	mov.f32 	%f528, %f503;
	mov.f32 	%f529, %f503;
	mov.f32 	%f530, %f503;
	mov.f32 	%f531, %f503;
	mov.f32 	%f532, %f503;
	mov.f32 	%f533, %f503;
	mov.f32 	%f534, %f503;
	.loc	1 91 23
	@%p17 bra 	$L__BB0_3;
	.loc	1 0 23
	shr.s32 	%r202, %r201, 31;
	shr.u32 	%r203, %r202, 24;
	add.s32 	%r204, %r201, %r203;
	shr.s32 	%r1, %r204, 8;
	shr.u32 	%r5, %r4, 5;
	add.s32 	%r22, %r1, -2;
	and.b32  	%r23, %r5, 134217724;
	add.s32 	%r418, %r38, -512;
	.loc	1 91 23
	add.s32 	%r241, %r16, %r9;
	add.s32 	%r242, %r241, %r8;
	add.s32 	%r243, %r242, 48;
	mad.lo.s32 	%r244, %r34, %r243, %r17;
	add.s32 	%r245, %r244, %r18;
	cvt.s64.s32 	%rd39, %r245;
	add.s64 	%rd40, %rd39, %rd12;
	add.s64 	%rd1, %rd40, 512;
	add.s32 	%r246, %r242, 32;
	mad.lo.s32 	%r247, %r34, %r246, %r17;
	add.s32 	%r248, %r247, %r18;
	cvt.s64.s32 	%rd41, %r248;
	add.s64 	%rd42, %rd41, %rd12;
	add.s64 	%rd2, %rd42, 512;
	add.s32 	%r249, %r242, 16;
	mad.lo.s32 	%r250, %r34, %r249, %r17;
	add.s32 	%r251, %r250, %r18;
	cvt.s64.s32 	%rd43, %r251;
	add.s64 	%rd44, %rd43, %rd12;
	add.s64 	%rd3, %rd44, 512;
	mad.lo.s32 	%r252, %r34, %r242, %r17;
	add.s32 	%r253, %r252, %r18;
	cvt.s64.s32 	%rd45, %r253;
	add.s64 	%rd46, %rd45, %rd12;
	add.s64 	%rd4, %rd46, 512;
	shl.b32 	%r254, %r39, 6;
	or.b32  	%r255, %r254, %r9;
	add.s32 	%r256, %r255, %r8;
	shl.b32 	%r257, %r3, 6;
	sub.s32 	%r258, %r256, %r257;
	add.s32 	%r259, %r258, 48;
	mad.lo.s32 	%r260, %r33, %r259, %r17;
	add.s32 	%r261, %r260, %r18;
	cvt.s64.s32 	%rd47, %r261;
	add.s64 	%rd48, %rd47, %rd11;
	add.s64 	%rd5, %rd48, 512;
	or.b32  	%r262, %r258, 32;
	mad.lo.s32 	%r263, %r33, %r262, %r17;
	add.s32 	%r264, %r263, %r18;
	cvt.s64.s32 	%rd49, %r264;
	add.s64 	%rd50, %rd49, %rd11;
	add.s64 	%rd6, %rd50, 512;
	add.s32 	%r265, %r258, 16;
	mad.lo.s32 	%r266, %r33, %r265, %r17;
	add.s32 	%r267, %r266, %r18;
	cvt.s64.s32 	%rd51, %r267;
	add.s64 	%rd52, %rd51, %rd11;
	add.s64 	%rd7, %rd52, 512;
	mad.lo.s32 	%r268, %r33, %r258, %r17;
	add.s32 	%r269, %r268, %r18;
	cvt.s64.s32 	%rd53, %r269;
	add.s64 	%rd54, %rd53, %rd11;
	add.s64 	%rd8, %rd54, 512;
	mov.b32 	%r421, 0;
	mov.f32 	%f432, 0f00000000;
	mov.b32 	%r420, 1;
	mov.b32 	%r419, -1;
	mov.u64 	%rd109, 0;
	mov.f32 	%f431, 0f00000001;
	mov.f32 	%f430, 0f00000080;
	mov.f32 	%f503, %f432;
	mov.f32 	%f504, %f432;
	mov.f32 	%f505, %f432;
	mov.f32 	%f506, %f432;
	mov.f32 	%f507, %f432;
	mov.f32 	%f508, %f432;
	mov.f32 	%f509, %f432;
	mov.f32 	%f510, %f432;
	mov.f32 	%f511, %f432;
	mov.f32 	%f512, %f432;
	mov.f32 	%f513, %f432;
	mov.f32 	%f514, %f432;
	mov.f32 	%f515, %f432;
	mov.f32 	%f516, %f432;
	mov.f32 	%f517, %f432;
	mov.f32 	%f518, %f432;
	mov.f32 	%f519, %f432;
	mov.f32 	%f520, %f432;
	mov.f32 	%f521, %f432;
	mov.f32 	%f522, %f432;
	mov.f32 	%f523, %f432;
	mov.f32 	%f524, %f432;
	mov.f32 	%f525, %f432;
	mov.f32 	%f526, %f432;
	mov.f32 	%f527, %f432;
	mov.f32 	%f528, %f432;
	mov.f32 	%f529, %f432;
	mov.f32 	%f530, %f432;
	mov.f32 	%f531, %f432;
	mov.f32 	%f532, %f432;
	mov.f32 	%f533, %f432;
	mov.f32 	%f534, %f432;
$L__BB0_2:
	setp.lt.s32 	%p30, %r421, %r22;
	add.s32 	%r286, %r419, 1;
	setp.lt.s32 	%p31, %r286, 3;
	selp.b32 	%r419, %r286, 0, %p31;
	.loc	1 94 20
	shl.b32 	%r287, %r419, 13;
	add.s32 	%r289, %r234, %r287;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 95 20
	add.s32 	%r290, %r289, 24576;
	.loc	1 97 27
	shfl.sync.idx.b32	%r291, %r23, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r292, %r291, 7;
	and.b32  	%r293, %r292, 384;
	cvt.u64.u32 	%rd71, %r293;
	shr.u32 	%r294, %r289, 4;
	cvt.u64.u32 	%rd72, %r294;
	and.b64  	%rd73, %rd72, 16383;
	add.s64 	%rd74, %rd73, %rd71;
	or.b64  	%rd55, %rd74, 4611686293338849280;
	shr.u32 	%r295, %r290, 4;
	cvt.u64.u32 	%rd75, %r295;
	and.b64  	%rd76, %rd75, 16383;
	or.b64  	%rd56, %rd76, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f503,%f504,%f505,%f506,%f507,%f508,%f509,%f510,%f511,%f512,%f513,%f514,%f515,%f516,%f517,%f518,%f519,%f520,%f521,%f522,%f523,%f524,%f525,%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534}, %rd55, %rd56, 1, 1, 1;
	// end inline asm
	add.s64 	%rd57, %rd74, 4611686293338849282;
	add.s64 	%rd58, %rd76, 4611686293338849282;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f503,%f504,%f505,%f506,%f507,%f508,%f509,%f510,%f511,%f512,%f513,%f514,%f515,%f516,%f517,%f518,%f519,%f520,%f521,%f522,%f523,%f524,%f525,%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534}, %rd57, %rd58, 1, 1, 1;
	// end inline asm
	add.s64 	%rd59, %rd74, 4611686293338849284;
	add.s64 	%rd60, %rd76, 4611686293338849284;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f503,%f504,%f505,%f506,%f507,%f508,%f509,%f510,%f511,%f512,%f513,%f514,%f515,%f516,%f517,%f518,%f519,%f520,%f521,%f522,%f523,%f524,%f525,%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534}, %rd59, %rd60, 1, 1, 1;
	// end inline asm
	add.s64 	%rd61, %rd74, 4611686293338849286;
	add.s64 	%rd62, %rd76, 4611686293338849286;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k32.f32.e4m3.e4m3 {%f503,%f504,%f505,%f506,%f507,%f508,%f509,%f510,%f511,%f512,%f513,%f514,%f515,%f516,%f517,%f518,%f519,%f520,%f521,%f522,%f523,%f524,%f525,%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534}, %rd61, %rd62, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f387, %r289;
	mov.b32 	%f392, %r290;
	mov.f32 	%f394, %f430;
	mov.f32 	%f389, %f431;
	mov.f32 	%f396, %f432;
	mov.f32 	%f393, %f431;
	mov.f32 	%f388, %f430;
	mov.f32 	%f390, %f432;
	mov.f32 	%f391, %f432;
	mov.f32 	%f395, %f432;
	// begin inline asm
	// wait for regs: %f503,%f504,%f505,%f506,%f507,%f508,%f509,%f510,%f511,%f512,%f513,%f514,%f515,%f516,%f517,%f518,%f519,%f520,%f521,%f522,%f523,%f524,%f525,%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534,%f387,%f388,%f389,%f390,%f391,%f392,%f393,%f394,%f395,%f396
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 100 18
	add.s64 	%rd63, %rd8, %rd109;
	add.s64 	%rd64, %rd7, %rd109;
	add.s64 	%rd65, %rd6, %rd109;
	.loc	1 101 18
	add.s64 	%rd66, %rd5, %rd109;
	add.s64 	%rd67, %rd4, %rd109;
	add.s64 	%rd68, %rd3, %rd109;
	add.s64 	%rd69, %rd2, %rd109;
	.loc	1 91 23
	add.s64 	%rd70, %rd1, %rd109;
	add.s32 	%r296, %r420, 1;
	setp.lt.s32 	%p32, %r296, 3;
	selp.b32 	%r420, %r296, 0, %p32;
	.loc	1 94 51
	setp.lt.s32 	%p33, %r19, %r418;
	.loc	1 94 20
	shl.b32 	%r297, %r420, 13;
	bar.sync 	0;
	add.s32 	%r270, %r169, %r297;
	add.s32 	%r272, %r270, 2048;
	add.s32 	%r274, %r270, 4096;
	add.s32 	%r276, %r270, 6144;
	selp.b32 	%r298, 16, 0, %p33;
	selp.b32 	%r273, %r298, 0, %p30;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r270 + 0 ], [ %rd63 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r272 + 0 ], [ %rd64 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r274 + 0 ], [ %rd65 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r276 + 0 ], [ %rd66 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 95 20
	add.s32 	%r278, %r177, %r297;
	add.s32 	%r280, %r278, 2048;
	add.s32 	%r282, %r278, 4096;
	add.s32 	%r284, %r278, 6144;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r278 + 0 ], [ %rd67 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r280 + 0 ], [ %rd68 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r282 + 0 ], [ %rd69 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r284 + 0 ], [ %rd70 + 0 ], 0x10, %r273;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 91 23
	add.s32 	%r421, %r421, 1;
	add.s64 	%rd109, %rd109, 256;
	add.s32 	%r418, %r418, -256;
	setp.lt.s32 	%p34, %r421, %r1;
	@%p34 bra 	$L__BB0_2;
$L__BB0_3:
	.loc	1 65 44
	shl.b32 	%r351, %r11, 3;
	.loc	1 91 23
	// begin inline asm
	// wait for regs: %f503,%f504,%f505,%f506,%f507,%f508,%f509,%f510,%f511,%f512,%f513,%f514,%f515,%f516,%f517,%f518,%f519,%f520,%f521,%f522,%f523,%f524,%f525,%f526,%f527,%f528,%f529,%f530,%f531,%f532,%f533,%f534
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 105 31
	or.b32  	%r352, %r16, %r351;
	or.b32  	%r353, %r352, 2;
	or.b32  	%r354, %r352, 4;
	or.b32  	%r355, %r352, 6;
	.loc	1 107 40
	mul.lo.s32 	%r356, %r12, %r35;
	mul.lo.s32 	%r357, %r13, %r35;
	mul.lo.s32 	%r358, %r14, %r35;
	mul.lo.s32 	%r359, %r15, %r35;
	.loc	1 107 52
	add.s32 	%r360, %r356, %r352;
	add.s32 	%r361, %r356, %r353;
	add.s32 	%r362, %r356, %r354;
	add.s32 	%r363, %r356, %r355;
	add.s32 	%r364, %r357, %r352;
	add.s32 	%r365, %r357, %r353;
	add.s32 	%r366, %r357, %r354;
	add.s32 	%r367, %r357, %r355;
	add.s32 	%r368, %r358, %r352;
	add.s32 	%r369, %r358, %r353;
	add.s32 	%r370, %r358, %r354;
	add.s32 	%r371, %r358, %r355;
	add.s32 	%r372, %r359, %r352;
	add.s32 	%r373, %r359, %r353;
	add.s32 	%r374, %r359, %r354;
	add.s32 	%r375, %r359, %r355;
	.loc	1 107 22
	mul.wide.s32 	%rd93, %r360, 2;
	add.s64 	%rd77, %rd13, %rd93;
	mul.wide.s32 	%rd94, %r361, 2;
	add.s64 	%rd78, %rd13, %rd94;
	mul.wide.s32 	%rd95, %r362, 2;
	add.s64 	%rd79, %rd13, %rd95;
	mul.wide.s32 	%rd96, %r363, 2;
	add.s64 	%rd80, %rd13, %rd96;
	mul.wide.s32 	%rd97, %r364, 2;
	add.s64 	%rd81, %rd13, %rd97;
	mul.wide.s32 	%rd98, %r365, 2;
	add.s64 	%rd82, %rd13, %rd98;
	mul.wide.s32 	%rd99, %r366, 2;
	add.s64 	%rd83, %rd13, %rd99;
	mul.wide.s32 	%rd100, %r367, 2;
	add.s64 	%rd84, %rd13, %rd100;
	mul.wide.s32 	%rd101, %r368, 2;
	add.s64 	%rd85, %rd13, %rd101;
	mul.wide.s32 	%rd102, %r369, 2;
	add.s64 	%rd86, %rd13, %rd102;
	mul.wide.s32 	%rd103, %r370, 2;
	add.s64 	%rd87, %rd13, %rd103;
	mul.wide.s32 	%rd104, %r371, 2;
	add.s64 	%rd88, %rd13, %rd104;
	mul.wide.s32 	%rd105, %r372, 2;
	add.s64 	%rd89, %rd13, %rd105;
	mul.wide.s32 	%rd106, %r373, 2;
	add.s64 	%rd90, %rd13, %rd106;
	mul.wide.s32 	%rd107, %r374, 2;
	add.s64 	%rd91, %rd13, %rd107;
	mul.wide.s32 	%rd108, %r375, 2;
	add.s64 	%rd92, %rd13, %rd108;
	.loc	1 108 21
	setp.lt.s32 	%p51, %r12, %r36;
	setp.lt.s32 	%p52, %r13, %r36;
	setp.lt.s32 	%p53, %r14, %r36;
	setp.lt.s32 	%p54, %r15, %r36;
	.loc	1 108 45
	setp.lt.s32 	%p55, %r352, %r37;
	.loc	1 108 35
	and.pred  	%p35, %p51, %p55;
	and.pred  	%p39, %p52, %p55;
	and.pred  	%p43, %p53, %p55;
	and.pred  	%p47, %p54, %p55;
	.loc	1 110 26
	cvt.rn.f16.f32 	%rs65, %f504;
	cvt.rn.f16.f32 	%rs66, %f503;
	mov.b32 	%r376, {%rs66, %rs65};
	cvt.rn.f16.f32 	%rs67, %f506;
	cvt.rn.f16.f32 	%rs68, %f505;
	mov.b32 	%r377, {%rs68, %rs67};
	cvt.rn.f16.f32 	%rs69, %f508;
	cvt.rn.f16.f32 	%rs70, %f507;
	mov.b32 	%r378, {%rs70, %rs69};
	cvt.rn.f16.f32 	%rs71, %f510;
	cvt.rn.f16.f32 	%rs72, %f509;
	mov.b32 	%r379, {%rs72, %rs71};
	cvt.rn.f16.f32 	%rs73, %f512;
	cvt.rn.f16.f32 	%rs74, %f511;
	mov.b32 	%r380, {%rs74, %rs73};
	cvt.rn.f16.f32 	%rs75, %f514;
	cvt.rn.f16.f32 	%rs76, %f513;
	mov.b32 	%r381, {%rs76, %rs75};
	cvt.rn.f16.f32 	%rs77, %f516;
	cvt.rn.f16.f32 	%rs78, %f515;
	mov.b32 	%r382, {%rs78, %rs77};
	cvt.rn.f16.f32 	%rs79, %f518;
	cvt.rn.f16.f32 	%rs80, %f517;
	mov.b32 	%r383, {%rs80, %rs79};
	cvt.rn.f16.f32 	%rs81, %f520;
	cvt.rn.f16.f32 	%rs82, %f519;
	mov.b32 	%r384, {%rs82, %rs81};
	cvt.rn.f16.f32 	%rs83, %f522;
	cvt.rn.f16.f32 	%rs84, %f521;
	mov.b32 	%r385, {%rs84, %rs83};
	cvt.rn.f16.f32 	%rs85, %f524;
	cvt.rn.f16.f32 	%rs86, %f523;
	mov.b32 	%r386, {%rs86, %rs85};
	cvt.rn.f16.f32 	%rs87, %f526;
	cvt.rn.f16.f32 	%rs88, %f525;
	mov.b32 	%r387, {%rs88, %rs87};
	cvt.rn.f16.f32 	%rs89, %f528;
	cvt.rn.f16.f32 	%rs90, %f527;
	mov.b32 	%r388, {%rs90, %rs89};
	cvt.rn.f16.f32 	%rs91, %f530;
	cvt.rn.f16.f32 	%rs92, %f529;
	mov.b32 	%r389, {%rs92, %rs91};
	cvt.rn.f16.f32 	%rs93, %f532;
	cvt.rn.f16.f32 	%rs94, %f531;
	mov.b32 	%r390, {%rs94, %rs93};
	cvt.rn.f16.f32 	%rs95, %f534;
	cvt.rn.f16.f32 	%rs96, %f533;
	mov.b32 	%r391, {%rs96, %rs95};
	and.b32  	%r392, %r4, 15;
	shl.b32 	%r393, %r7, 2;
	and.b32  	%r394, %r393, 8;
	mad.lo.s32 	%r395, %r392, 72, %r394;
	mad.lo.s32 	%r396, %r6, 1152, %r395;
	shl.b32 	%r397, %r396, 1;
	add.s32 	%r299, %r234, %r397;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r299], {%r376, %r377, %r378, %r379};
	// end inline asm
	add.s32 	%r304, %r299, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r304], {%r380, %r381, %r382, %r383};
	// end inline asm
	add.s32 	%r309, %r299, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r309], {%r384, %r385, %r386, %r387};
	// end inline asm
	add.s32 	%r314, %r299, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r314], {%r388, %r389, %r390, %r391};
	// end inline asm
	bar.sync 	0;
	mad.lo.s32 	%r399, %r10, 72, %r351;
	shl.b32 	%r400, %r399, 1;
	add.s32 	%r401, %r234, %r400;
	ld.shared.v4.b32 	{%r402, %r403, %r404, %r405}, [%r401];
	ld.shared.v4.b32 	{%r406, %r407, %r408, %r409}, [%r401+2304];
	ld.shared.v4.b32 	{%r410, %r411, %r412, %r413}, [%r401+4608];
	ld.shared.v4.b32 	{%r414, %r415, %r416, %r417}, [%r401+6912];
	// begin inline asm
	mov.u32 %r319, 0x0;
	@%p35 atom.global.gpu.acq_rel.add.noftz.f16x2 %r319, [ %rd77 + 0 ], %r402;
	// end inline asm
	// begin inline asm
	mov.u32 %r321, 0x0;
	@%p35 atom.global.gpu.acq_rel.add.noftz.f16x2 %r321, [ %rd78 + 0 ], %r403;
	// end inline asm
	// begin inline asm
	mov.u32 %r323, 0x0;
	@%p35 atom.global.gpu.acq_rel.add.noftz.f16x2 %r323, [ %rd79 + 0 ], %r404;
	// end inline asm
	// begin inline asm
	mov.u32 %r325, 0x0;
	@%p35 atom.global.gpu.acq_rel.add.noftz.f16x2 %r325, [ %rd80 + 0 ], %r405;
	// end inline asm
	// begin inline asm
	mov.u32 %r327, 0x0;
	@%p39 atom.global.gpu.acq_rel.add.noftz.f16x2 %r327, [ %rd81 + 0 ], %r406;
	// end inline asm
	// begin inline asm
	mov.u32 %r329, 0x0;
	@%p39 atom.global.gpu.acq_rel.add.noftz.f16x2 %r329, [ %rd82 + 0 ], %r407;
	// end inline asm
	// begin inline asm
	mov.u32 %r331, 0x0;
	@%p39 atom.global.gpu.acq_rel.add.noftz.f16x2 %r331, [ %rd83 + 0 ], %r408;
	// end inline asm
	// begin inline asm
	mov.u32 %r333, 0x0;
	@%p39 atom.global.gpu.acq_rel.add.noftz.f16x2 %r333, [ %rd84 + 0 ], %r409;
	// end inline asm
	// begin inline asm
	mov.u32 %r335, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r335, [ %rd85 + 0 ], %r410;
	// end inline asm
	// begin inline asm
	mov.u32 %r337, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r337, [ %rd86 + 0 ], %r411;
	// end inline asm
	// begin inline asm
	mov.u32 %r339, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r339, [ %rd87 + 0 ], %r412;
	// end inline asm
	// begin inline asm
	mov.u32 %r341, 0x0;
	@%p43 atom.global.gpu.acq_rel.add.noftz.f16x2 %r341, [ %rd88 + 0 ], %r413;
	// end inline asm
	// begin inline asm
	mov.u32 %r343, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r343, [ %rd89 + 0 ], %r414;
	// end inline asm
	// begin inline asm
	mov.u32 %r345, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r345, [ %rd90 + 0 ], %r415;
	// end inline asm
	// begin inline asm
	mov.u32 %r347, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r347, [ %rd91 + 0 ], %r416;
	// end inline asm
	// begin inline asm
	mov.u32 %r349, 0x0;
	@%p47 atom.global.gpu.acq_rel.add.noftz.f16x2 %r349, [ %rd92 + 0 ], %r417;
	// end inline asm
	.loc	1 110 4
	ret;
$L__tmp4:
$L__func_end0:

}
	.file	1 "/opt/dlami/nvme/csullivan/applied-ai/kernels/triton/inference/fp8/splitk_gemm_fp8.py"
	.file	2 "/opt/dlami/nvme/csullivan/triton/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 215
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 115
.b8 112
.b8 108
.b8 105
.b8 116
.b8 107
.b8 95
.b8 103
.b8 101
.b8 109
.b8 109
.b8 95
.b8 102
.b8 112
.b8 56
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 100
.b8 108
.b8 97
.b8 109
.b8 105
.b8 47
.b8 110
.b8 118
.b8 109
.b8 101
.b8 47
.b8 99
.b8 115
.b8 117
.b8 108
.b8 108
.b8 105
.b8 118
.b8 97
.b8 110
.b8 47
.b8 97
.b8 112
.b8 112
.b8 108
.b8 105
.b8 101
.b8 100
.b8 45
.b8 97
.b8 105
.b8 47
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 115
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 47
.b8 105
.b8 110
.b8 102
.b8 101
.b8 114
.b8 101
.b8 110
.b8 99
.b8 101
.b8 47
.b8 102
.b8 112
.b8 56
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 103
.b8 101
.b8 109
.b8 109
.b8 95
.b8 115
.b8 112
.b8 108
.b8 105
.b8 116
.b8 95
.b8 107
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 126
.b8 4
.b32 126
.b64 $L__tmp1
.b64 $L__tmp2
.b8 1
.b8 60
.b8 24
.b8 4
.b32 126
.b64 $L__tmp2
.b64 $L__tmp3
.b8 1
.b8 62
.b8 40
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}

